import matplotlib.pyplot as plt
import sounddevice as sd
import numpy as np 
from scipy import signal, fft
import queue
from smbus2 import SMBus
import time
import os

os.chdir(os.path.dirname(os.path.abspath(__file__)))

def start_mics():
    with SMBus(1) as bus:
        if bus.read_byte_data(int('4E', 16), int('75', 16)) != int('60', 16):
            bus.write_byte_data(int('4E', 16), int('2', 16), int('81', 16))
            time.sleep(1e-3)
            bus.write_byte_data(int('4E', 16), int('7', 16), int('60', 16))
            bus.write_byte_data(int('4E', 16), int('B', 16), int('0', 16))
            bus.write_byte_data(int('4E', 16), int('C', 16), int('20', 16))
            bus.write_byte_data(int('4E', 16), int('22', 16), int('41', 16))
            bus.write_byte_data(int('4E', 16), int('2B', 16), int('40', 16))
            bus.write_byte_data(int('4E', 16), int('73', 16), int('C0', 16))
            bus.write_byte_data(int('4E', 16), int('74', 16), int('C0', 16))
            bus.write_byte_data(int('4E', 16), int('75', 16), int('60', 16))

def get_soundcard_iostream(device_list):
    for i, each in enumerate(device_list):
        dev_name = each['name']
        asio_in_name = 'MCHStreamer' in dev_name
        if asio_in_name:
            return (i, i)
        
def pow_two_pad_and_window(vec, fs, show=False):
    window = signal.windows.hann(len(vec))
    windowed_vec = vec * window
    padded_windowed_vec = np.pad(windowed_vec, (0, 2**int(np.ceil(np.log2(len(windowed_vec)))) - len(windowed_vec)))
    if show:
        dur = len(padded_windowed_vec) / fs
        t = np.linspace(0, dur, len(padded_windowed_vec))
        plt.figure()
        plt.plot(t, padded_windowed_vec)
        plt.show()
    return padded_windowed_vec/max(padded_windowed_vec)

def pow_two(vec):
    return np.pad(vec, (0, 2**int(np.ceil(np.log2(len(vec)))) - len(vec)))

if __name__ == "__main__":

    fs = 192000
    dur = 3e-3

    t_tone = np.linspace(0, dur, int(fs*dur))
    chirp = signal.chirp(t_tone, 80e3, t_tone[-1], 20e3)    
    sig = pow_two_pad_and_window(chirp, fs, show=False)

    silence_dur = 25 # [ms]
    silence_samples = int(silence_dur * fs/1000)
    silence_vec = np.zeros((silence_samples, ))
    full_sig = pow_two(np.concatenate((sig, silence_vec)))
    output_sig = np.float32(np.reshape(full_sig, (-1, 1)))

    audio_in_data = queue.Queue()

    current_frame = 0
    def callback(indata, outdata, frames, time, status):
        global current_frame
        if status:
            print(status)
        chunksize = min(len(output_sig) - current_frame, frames)
        outdata[:chunksize] = output_sig[current_frame:current_frame + chunksize]
        audio_in_data.put(indata.copy())
        if chunksize < frames:
            outdata[chunksize:] = 0
            raise sd.CallbackAbort()
        current_frame += chunksize

    start_mics()
    soundcard = get_soundcard_iostream(sd.query_devices())

    stream = sd.Stream(samplerate=fs,
                       blocksize=0, 
                       device=soundcard, 
                       channels=(8, 1),
                       callback=callback,
                       latency='low')
    
    # Little pause to let the soundcard settle
    time.sleep(0.5)

    with stream:
        while stream.active:
            pass
    
    all_input_audio = []
    while not audio_in_data.empty():
        all_input_audio.append(audio_in_data.get())            
    input_audio = np.concatenate(all_input_audio)
    valid_channels_audio = np.array([input_audio[:, 2], input_audio[:, 3], input_audio[:, 6], input_audio[:, 7]])

    mf_signals = signal.correlate(valid_channels_audio, np.reshape(sig, (1, -1)), mode='full', method='fft')
    
    ref_sig = mf_signals[0, :]
    delayed_sig = mf_signals[1, :]

    RefSig = fft.rfft(pow_two(ref_sig))
    DelayedSig = np.conjugate(fft.rfft(pow_two(ref_sig)))

    PHAT = np.abs(RefSig*DelayedSig)

    R = fft.irfft(RefSig*DelayedSig)

    plt.figure()
    plt.plot(R)
    plt.show()
    # test = signal.correlate(mf_signals, mf_signals[0, :].reshape((1, -1)), mode='full', method='fft')
    # test_h = np.abs(signal.hilbert(test))
    
    # plt.figure()
    # pp = plt.subplot(411)
    # plt.plot(mf_signals[0, :])
    # plt.grid()
    # plt.title('Channel 3')
    # plt.subplot(412, sharex=pp)
    # plt.plot(mf_signals[1, :])
    # plt.grid()
    # plt.title('Channel 4')
    # plt.subplot(413, sharex=pp)
    # plt.plot(mf_signals[2, :])
    # plt.grid()
    # plt.title('Channel 7')
    # plt.subplot(414, sharex=pp)
    # plt.plot(mf_signals[3, :])
    # plt.grid()
    # plt.title('Channel 8')
    # plt.tight_layout()
    # plt.show()

    # plt.figure()
    # pp = plt.subplot(311)
    # plt.plot(test_h[0, :])
    # plt.grid()
    # plt.title('Channel 4')
    # plt.subplot(312, sharex=pp)
    # plt.plot(test_h[1, :])
    # plt.grid()
    # plt.title('Channel 7')
    # plt.subplot(313, sharex=pp)
    # plt.plot(test_h[2, :])
    # plt.grid()
    # plt.title('Channel 8')
    # plt.tight_layout()
    # plt.show()